use clap::{command, Args, Subcommand};

use crate::utils::query::Query;

#[derive(Clone, Debug, Args)]
pub(crate) struct Appservice {
    pub(crate) appservice: String,
}

#[derive(Clone, Debug, Args)]
pub(crate) struct ListArgs {
    #[command(flatten)]
    pub(crate) query: Query,
}

#[derive(Debug, Subcommand)]
pub(crate) enum Command {
    /// List all the currently registered appservices
    List(ListArgs),

    /// Register an appservice using its registration YAML
    ///
    /// This command needs a YAML generated by an appservice (such as a
    /// bridge), which must be provided in a Markdown code-block below the
    /// command.
    ///
    /// Registering a new bridge using the ID of an existing bridge will
    /// replace the old one.
    ///
    /// [commandbody]()
    /// # ```
    /// # yaml content here
    /// # ```
    // Allowed because the doc comment gets parsed by our code later
    #[allow(clippy::doc_markdown)]
    Register,

    /// Unregister an appservice using its ID
    ///
    /// You can find the ID using the `list-appservices` command.
    Unregister(Appservice),
}
